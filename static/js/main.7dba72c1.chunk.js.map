{"version":3,"sources":["NumberInput.js","CalcHistory.js","Calculator.js","App.js","serviceWorker.js","index.js"],"names":["NumberInput","props","handleChange","bind","event","this","handleNumChange","target","value","numValue","type","onChange","React","Component","CalcHistory","historyItems","calcHistoryItems","historyItemsList","index","key","push","ListGroupItem","ListGroup","Calculator","handleNumChangeLeft","handleNumChangeRight","addOperation","state","numLeft","numRight","calculationString","result","calcHistoryList","rel","href","Row","id","className","Col","xs","lg","numSide","Button","variant","onClick","decreaseOperation","multiplyOperation","rootOperation","newNum","setState","input","isNaN","newCalculation","newResult","calcHistoryItemsCopy","checkIfNum","parseInt","unshift","length","pop","Math","sqrt","toFixed","App","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"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","file":"static/js/main.7dba72c1.chunk.js","sourcesContent":["import React from \"react\";\n\nclass NumberInput extends React.Component {\n    constructor(props) {\n        super(props);\n        this.handleChange = this.handleChange.bind(this);\n    }\n\n    handleChange(event) {\n        this.props.handleNumChange(event.target.value);\n        //  this.setState({value: event.target.numberValue.replace(/[^0-9]/g, '')});\n    }\n\n    render() {\n        const numValue = this.props.numValue;\n        return (\n            <input type=\"text\" value={numValue} onChange={this.handleChange}/>\n        );\n    }\n\n}\n\nexport default NumberInput;","import React from \"react\";\nimport ListGroup from \"react-bootstrap/ListGroup\";\nimport ListGroupItem from \"react-bootstrap/ListGroupItem\";\n\nclass CalcHistory extends React.Component {\n    render() {\n        const historyItems = this.props.calcHistoryItems;\n        let historyItemsList = [];\n        let index = 0;\n        for (let key of historyItems){\n            historyItemsList.push(<ListGroupItem key={index}>{key}\n            </ListGroupItem>);\n            index++;\n        }\n        return (\n            <ListGroup>\n                {historyItemsList}\n            </ListGroup>\n        );\n    }\n}\n\nexport default CalcHistory;","import React from 'react';\nimport Button from 'react-bootstrap/Button';\nimport ListGroupItem from \"react-bootstrap/ListGroupItem\";\nimport Row from \"react-bootstrap/Row\";\nimport NumberInput from './NumberInput.js';\nimport CalcHistory from \"./CalcHistory\";\nimport Col from \"react-bootstrap/esm/Col\";\n\n\nclass Calculator extends React.Component {\n    constructor(props) {\n        super(props);\n        this.handleNumChangeLeft = this.handleNumChangeLeft.bind(this);\n        this.handleNumChangeRight = this.handleNumChangeRight.bind(this);\n        this.addOperation = this.addOperation.bind(this);\n        this.state = {\n            numLeft: 0,\n            numRight: 0,\n            calculationString: '',\n            result: 0,\n            calcHistoryList: [],\n        }\n\n    }\n\n    render() {\n        const numLeft = this.state.numLeft;\n        const numRight = this.state.numRight;\n        return (\n            <div>\n                <link rel=\"stylesheet\" href=\"https://use.fontawesome.com/releases/v5.13.0/css/all.css\"/>\n                    <link rel=\"stylesheet\" href=\"https://use.fontawesome.com/releases/v5.13.0/css/v4-shims.css\"/>\n                        <h1>Calculator</h1>\n                        <Row id={\"mainRow\"} className=\"justify-content-md-center\">\n                            <Col className={\"calcArea\"} xs lg=\"3\">\n                                <h2>Input</h2>\n                                <NumberInput\n                                    numSide=\"l\"\n                                    handleNumChange={this.handleNumChangeLeft}\n                                    numValue={numLeft}/>\n                                <NumberInput\n                                    numSide=\"r\"\n                                    handleNumChange={this.handleNumChangeRight}\n                                    numValue={numRight}/>\n                                <Row className={\"buttonRow\"}>\n                                    <Button variant=\"outline-dark\" onClick={this.addOperation}><i\n                                        className=\"fas fa-plus\"/></Button>\n                                    <Button variant=\"outline-dark\" onClick={() => this.decreaseOperation()}><i\n                                        className=\"fas fa-minus\"/></Button>\n                                    <Button variant=\"outline-dark\" onClick={() => this.multiplyOperation()}><i\n                                        className=\"fa fa-close\"/></Button>\n                                    <Button variant=\"outline-dark\" onClick={() => this.rootOperation()}><i\n                                        className=\"fa fa-square-root-alt\"/></Button>\n                                </Row>\n                                <ListGroupItem variant=\"light\">Calculation\n                                    : {this.state.calculationString}</ListGroupItem>\n                                <ListGroupItem variant=\"light\">Result : {this.state.result}</ListGroupItem>\n                            </Col>\n                            <Col className={\"historyArea\"} xs lg=\"3\">\n                                <h2>History</h2>\n                                <CalcHistory calcHistoryItems={this.state.calcHistoryList}/>\n                            </Col>\n                        </Row>\n            </div>\n\n    )\n    }\n\n    handleNumChangeLeft(newNum) {\n        this.setState({numLeft: newNum});\n    }\n\n    handleNumChangeRight(newNum) {\n        this.setState({numRight: newNum});\n    }\n\n    checkIfNum(input) {\n        if (isNaN(input)) {\n        return false\n    } else {\n        return true;\n    }\n    }\n\n    addOperation() {\n        let numLeft = this.state.numLeft;\n        let numRight = this.state.numRight;\n        let newCalculation;\n        let newResult;\n        let calcHistoryItemsCopy = this.state.calcHistoryList;\n        if (this.checkIfNum(numLeft) && this.checkIfNum(numRight)) {\n        newResult = parseInt(numLeft) + parseInt(numRight);\n        newCalculation = ` ${numLeft} + ${numRight} = ${newResult}`;\n    } else {\n        newCalculation = 'not posiible -> invalid input';\n        newResult = \" \";\n    }\n\n        calcHistoryItemsCopy.unshift(newCalculation);\n        if (calcHistoryItemsCopy.length > 6) {\n        calcHistoryItemsCopy.pop();\n    }\n\n        this.setState({\n        calculationString: newCalculation,\n        result: newResult,\n        calcHistoryList: calcHistoryItemsCopy,\n    });\n    }\n\n    decreaseOperation() {\n        let numLeft = this.state.numLeft;\n        let numRight = this.state.numRight;\n        let newCalculation;\n        let newResult;\n        let calcHistoryItemsCopy = this.state.calcHistoryList;\n        if (this.checkIfNum(numLeft) && this.checkIfNum(numRight)) {\n        newResult = parseInt(numLeft) - parseInt(numRight);\n        newCalculation = ` ${numLeft} - ${numRight} = ${newResult} `;\n    } else {\n        newCalculation = 'not posiible -> invalid input';\n        newResult = \" \";\n    }\n        calcHistoryItemsCopy.unshift(newCalculation);\n        if (calcHistoryItemsCopy.length > 6) {\n        calcHistoryItemsCopy.pop();\n    }\n        this.setState({\n        calculationString: newCalculation,\n        result: newResult\n    });\n    }\n\n    multiplyOperation() {\n        let numLeft = this.state.numLeft;\n        let numRight = this.state.numRight;\n        let newCalculation;\n        let newResult;\n        let calcHistoryItemsCopy = this.state.calcHistoryList;\n        if (this.checkIfNum(numLeft) && this.checkIfNum(numRight)) {\n        newResult = parseInt(numLeft) * parseInt(numRight);\n        newCalculation = ` ${numLeft} x ${numRight} = ${newResult} `;\n\n    } else {\n        newCalculation = 'not posiible -> invalid input';\n        newResult = \" \";\n    }\n        calcHistoryItemsCopy.unshift(newCalculation);\n        if (calcHistoryItemsCopy.length > 6) {\n        calcHistoryItemsCopy.pop();\n    }\n        this.setState({\n        calculationString: newCalculation,\n        result: newResult\n    });\n    }\n\n\n    rootOperation() {\n        let numLeft = this.state.numLeft;\n        let numRight = this.state.numRight;\n        let newCalculation;\n        let newResult;\n        let calcHistoryItemsCopy = this.state.calcHistoryList;\n        if (this.checkIfNum(numLeft) && this.checkIfNum(numRight)) {\n        if (numRight <= 0) {\n        newCalculation = ` ${numLeft} √ ${numRight} not possible `;\n        newResult = 'root must be non zero';\n    } else {\n        newResult = Math.sqrt(parseInt(numRight));\n        newResult*=parseInt(numLeft);\n        newResult=newResult.toFixed(3);\n        newCalculation = ` ${numLeft} √ ${numRight} = ${newResult}`;\n    }\n    } else {\n        newCalculation = 'not possible -> invalid input';\n        newResult = \" \";\n    }\n        calcHistoryItemsCopy.unshift(newCalculation);\n        if (calcHistoryItemsCopy.length > 6) {\n        calcHistoryItemsCopy.pop();\n    }\n\n        this.setState({\n        calculationString: newCalculation,\n        result: newResult\n    });\n    }\n    }\n\n    const numSide = {\n        l: 'left',\n        r: 'right'\n    };\n\n\n    export default Calculator;","import React from 'react';\nimport './App.css';\nimport Calculator from \"./Calculator.js\";\nimport 'bootstrap/dist/css/bootstrap.min.css';\n\nfunction App() {\n  return (\n    <div className=\"App\">\n      <Calculator>\n      </Calculator>\n    </div>\n  );\n}\n\n\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}